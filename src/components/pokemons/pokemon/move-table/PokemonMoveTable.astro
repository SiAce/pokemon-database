---
import { VersionGroupById, versionGroupIds } from "src/utils/data-read";
import { capitalizeSnakeCase } from "src/utils/string";
import MoveMethodSection from "./MoveMethodSection.astro";

const { pokemonMoveByMethod } = Astro.props;
---

<table class="!table w-full table-auto border-collapse">
  <colgroup>
    <col span="5" />
    {versionGroupIds.map((id) => <col id={`col-${id}`} />)}
  </colgroup>
  <thead>
    <tr>
      <th colspan="5"></th>
      {
        versionGroupIds.map((id) => (
          <th>
            <button class=" mx-auto aspect-square w-[2em] cursor-pointer" type="button" id={id} aria-expanded={true}>
              -
            </button>
          </th>
        ))
      }
    </tr>
    <tr>
      <th colspan="5"></th>
      {versionGroupIds.map((id) => <th>{capitalizeSnakeCase(VersionGroupById[id].identifier)}</th>)}
    </tr>
    <tr>
      <th>Move</th>
      <th>Type</th>
      <th>Power</th>
      <th>Accuracy</th>
      <th>PP</th>
      <th colspan="100%">Level</th>
    </tr>
  </thead>
  {
    Object.entries(pokemonMoveByMethod).map(([pokemon_move_method_id, pokemonMoveByMove]) => (
      <MoveMethodSection pokemon_move_method_id={pokemon_move_method_id} pokemonMoveByMove={pokemonMoveByMove} />
    ))
  }
</table>
<style>
  th {
    padding: 0 0.5em;
  }
  tr {
    border-bottom: 1px solid var(--sl-color-gray-6);
  }
</style>
<script define:vars={{ versionGroupIds, pokemonMoveByMethod }}>
  versionGroupIds.forEach((versionGroupId) => {
    const button = document.getElementById(versionGroupId);
    const otherIds = versionGroupIds.filter((id) => id !== versionGroupId);
    const emptyRows = [];
    Object.entries(pokemonMoveByMethod).forEach(([pokemon_move_method_id, pokemonMoveByMove]) => {
      Object.entries(pokemonMoveByMove).forEach(([move_id, pokemonMoveByVersionGroup]) => {
        if (!pokemonMoveByVersionGroup[versionGroupId]) {
          emptyRows.push(document.getElementById(`${pokemon_move_method_id}|${move_id}`));
        }
      });
    });
    button.addEventListener("click", () => {
      if (button.ariaExpanded === "true") {
        otherIds.forEach((id) => {
          const col = document.getElementById(`col-${id}`);
          col.style.visibility = "collapse";
          const otherButton = document.getElementById(id);
          otherButton.disabled = true;
        });
        emptyRows.forEach((emptyRow) => (emptyRow.style.visibility = "collapse"));

        button.ariaExpanded = false;
        button.innerHTML = "+";
      } else {
        versionGroupIds.forEach((id) => {
          const col = document.getElementById(`col-${id}`);
          col.style.visibility = "visible";
          const anyButton = document.getElementById(id);
          anyButton.disabled = false;
        });
        emptyRows.forEach((emptyRow) => (emptyRow.style.visibility = "visible"));
        button.ariaExpanded = true;
        button.innerHTML = "-";
      }
    });
  });
</script>
