---
import { Card } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import pokemons from "@data/json/pokemons.json";
import statColorJson from "../../../utils/stat-color.json";
import { capitalizeFirstLetter, capitalizeSnakeCase } from "../../../utils/string";
import typeColorJson from "../../../utils/type-color.json";
import { Picture } from "astro:assets";

export function getStaticPaths() {
  return Object.keys(pokemons).map((id) => ({
    params: { id },
  }));
}

const { id } = Astro.params;

const pokemon = pokemons[id];

const {
  height,
  weight,
  base_experience,
  species_id,
  gender_rate,
  capture_rate,
  base_happiness,
  is_baby,
  hatch_counter,
  has_gender_differences,
  forms_switchable,
  is_legendary,
  is_mythical,
  types,
  abilities,
  stats,
  forms,
  game_indices,
  items,
  moves,
} = pokemon;
const [name, species, color, generation] = [pokemon.name, pokemon.species, pokemon.color, pokemon.generation].map(
  capitalizeSnakeCase
);

const headings = [
  { depth: 2, slug: "basic-info", text: "Basic Info" },
  { depth: 2, slug: "sprites", text: "Sprites" },
  { depth: 2, slug: "moves", text: "Moves" },
];
---

<StarlightPage frontmatter={{ title: name }} headings={headings}>
  <h2 id={headings[0].slug}>{headings[0].text}</h2>
  <Card title={name}>
    <div class="flex flex-col divide-y-2 gap-4">
      <Picture class="mx-auto"
        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
        width={300}
        height={300}
        formats={["avif", "webp"]}
        alt={name}
      />
      <div>
        <h4 class="my-2">Type</h4>
        <div>
          {
            types.map((type) => (
              <a class="no-underline" href="#">
                <span
                  class={`px-4 py-2 mr-4 text-gray-50`}
                  style={{
                    backgroundColor: (typeColorJson as any)[type.name],
                  }}
                >
                  {capitalizeFirstLetter(type.name)}
                </span>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Abilities</h4>
        <div>
          {
            abilities.map((ability) => (
              <a class="no-underline" href="#">
                <span class="rounded-md bg-gray-400 px-4 py-2 mr-4 font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10">
                  {capitalizeFirstLetter(ability.name)}
                </span>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Base Stats</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            stats.map((stat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: (statColorJson as any)[stat.name],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 py-2 text-sm">
                  <div>{capitalizeSnakeCase(stat.name)}</div>
                  <div>{stat.base_stat}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Effort Value Yield</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            stats.map((stat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: (statColorJson as any)[stat.name],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 py-2 text-sm">
                  <div>{capitalizeSnakeCase(stat.name)}</div>
                  <div>{stat.effort}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div class="py-2">
        <h4>Base Experience</h4>
        <div class="pl-2">{base_experience}</div>
      </div>
      <div class="flex justify-stretch divide-x-2">
        <div class="flex-auto mt-4 pl-2">
          <h4>Height</h4>
          <p>{height / 10} m</p>
        </div>
        <div class="flex-auto !mt-4 pl-2">
          <h4>Weight</h4>
          <p>{weight / 10} kg</p>
        </div>
      </div>
    </div>
  </Card>
  <hr class="!my-4 border-gray-800" />
  <h2 class="!my-4" id={headings[2].slug}>{headings[2].text}</h2>
  <div class="flex flex-col gap-2">
    {
      moves.map((move) => (
        <Card title={capitalizeSnakeCase(move.name)}>
          <hr class="!my-2" />
          <div class="flex flex-col divide-y-2">
            {/* <div>
              <h4 class="!text-xl">Learnset</h4>
              <table class=" border-2 px-2 !table !w-full">
                <thead>
                  <tr>
                    <th>Generation</th>
                    <th>Learn Method</th>
                    <th>Level Learned At</th>
                  </tr>
                </thead>
                <tbody>
                  {move.map((version_group: any) => (
                    <tr class="border-2 !m-2 p-2">
                      <td>{capitalizeSnakeCase(version_group.version_group.name)}</td>
                      <td>{capitalizeSnakeCase(version_group.move_learn_method.name)}</td>
                      <td>{version_group.level_learned_at}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div> */}
          </div>
        </Card>
      ))
    }
  </div>
</StarlightPage>
