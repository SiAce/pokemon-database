---
import { Card, Icon } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import EvolutionChain from "src/components/pokemons/pokemon/EvolutionChain.astro";
import TypeIcon from "src/components/pokemons/pokemon/TypeIcon.astro";
import {
  AbilityById,
  MoveById,
  Pokemon,
  PokemonAbilityByPokemonId,
  PokemonById,
  PokemonMoveByPokemonId,
  PokemonMoveMethodById,
  PokemonSpeciesById,
  PokemonStatByPokemonId,
  PokemonTypeByPokemonId,
  StatById,
  VersionGroupById,
} from "src/utils/data-read";
import statColorJson from "src/utils/stat-color.json";
import { capitalizeSnakeCase } from "src/utils/string";

export function getStaticPaths() {
  return Pokemon.map((pokemon) => ({
    params: { id: pokemon.id },
  }));
}

const { id } = Astro.params;
const pokemon = PokemonById[id];
const { identifier, species_id, height, weight, base_experience, is_default } = pokemon;
const [name] = [identifier].map(capitalizeSnakeCase);
const pokemonMoves = PokemonMoveByPokemonId[id];

const pokemonMovesByVersionGroupId = {};
if (pokemonMoves) {
  for (let i = 0; i < pokemonMoves.length; i++) {
    if (pokemonMoves[i].version_group_id in pokemonMovesByVersionGroupId) {
      pokemonMovesByVersionGroupId[pokemonMoves[i].version_group_id].push(pokemonMoves[i]);
    } else {
      pokemonMovesByVersionGroupId[pokemonMoves[i].version_group_id] = [pokemonMoves[i]];
    }
  }
}

const evolutionChainId = PokemonSpeciesById[species_id].evolution_chain_id;

const headings = [
  { depth: 2, slug: "basic-info", text: "Basic Info" },
  { depth: 2, slug: "sprites", text: "Sprites" },
  { depth: 2, slug: "evolution-chain", text: "Evolution Chain" },
  { depth: 2, slug: "moves", text: "Moves" },
];
---

<StarlightPage frontmatter={{ title: name }} headings={headings}>
  <div data-pagefind-ignore="all" class="flex justify-between">
    {
      pokemon.prev && (
        <a href={`/pokemons/pokemon/${pokemon.prev}`}>
          <Icon name="left-arrow" />
          <span>Previous #{pokemon.prev}</span>
        </a>
      )
    }
    {
      pokemon.next && (
        <a href={`/pokemons/pokemon/${pokemon.next}`} class="ml-auto flex flex-col items-end">
          <Icon name="right-arrow" />
          <span>Next #{pokemon.next}</span>
        </a>
      )
    }
  </div>
  <h2 id={headings[0].slug}>{headings[0].text}</h2>
  <Card title={`#${id} ${name}`}>
    <div class="flex flex-col divide-y-2 gap-4">
      <img
        class="mx-auto"
        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
        width={300}
        height={300}
        alt={name}
      />
      <div>
        <h4 class="my-2">Type</h4>
        <div class="flex gap-1">
          {PokemonTypeByPokemonId[id].map((pokemonType) => <TypeIcon type_id={pokemonType.type_id} />)}
        </div>
      </div>
      <div>
        <h4 class="my-2">Abilities</h4>
        <div>
          {
            PokemonAbilityByPokemonId[id].map((pokemonAbility) => (
              <a class="no-underline" href="#">
                <span class="rounded-md bg-gray-400 px-4 py-2 mr-4 font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10">
                  {capitalizeSnakeCase(AbilityById[pokemonAbility.ability_id].identifier)}
                </span>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Base Stats</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            PokemonStatByPokemonId[id].map((pokemonStat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: statColorJson[StatById[pokemonStat.stat_id].identifier],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 p-2 text-sm">
                  <div>{capitalizeSnakeCase(StatById[pokemonStat.stat_id].identifier)}</div>
                  <div>{pokemonStat.base_stat}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Effort Value Yield</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            PokemonStatByPokemonId[id].map((pokemonStat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: statColorJson[StatById[pokemonStat.stat_id].identifier],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 p-2 text-sm">
                  <div>{capitalizeSnakeCase(StatById[pokemonStat.stat_id].identifier)}</div>
                  <div>{pokemonStat.effort}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div class="py-2">
        <h4>Base Experience</h4>
        <div class="pl-2">{base_experience}</div>
      </div>
      <div class="flex justify-stretch divide-x-2">
        <div class="flex-auto mt-4 pl-2">
          <h4>Height</h4>
          <p>{height! / 10} m</p>
        </div>
        <div class="flex-auto !mt-4 pl-2">
          <h4>Weight</h4>
          <p>{weight! / 10} kg</p>
        </div>
      </div>
    </div>
  </Card>
  <hr class="!my-4 border-gray-800" />
  <h2 class="!my-4" id={headings[2].slug}>{headings[2].text}</h2>
  <div data-pagefind-ignore="all" class="not-content overflow-auto">
    <EvolutionChain evolutionChainId={evolutionChainId} />
  </div>
  <h2 class="!my-4" id={headings[3].slug}>{headings[3].text}</h2>
  <div data-pagefind-ignore="all" class="whitespace-nowrap">
    {
      pokemonMoves &&
        Object.entries(pokemonMovesByVersionGroupId).map(([versionGroupId, pokemonMoves]) => (
          <details>
            <summary>{capitalizeSnakeCase(VersionGroupById[versionGroupId].identifier)}</summary>
            <table class="!table w-full text-center">
              <thead>
                <tr>
                  <th>Level</th>
                  <th>Move</th>
                  <th>Type</th>
                  <th>Learn Method</th>
                  <th>Power</th>
                  <th>Accuracy</th>
                  <th>PP</th>
                </tr>
              </thead>
              <tbody>
                {(pokemonMoves as any).map((pokemonMove) => (
                  <tr>
                    <td>{pokemonMove.level}</td>
                    <td>{capitalizeSnakeCase(MoveById[pokemonMove.move_id].identifier)}</td>
                    <td>{<TypeIcon type_id={MoveById[pokemonMove.move_id].type_id} />}</td>
                    <td>{capitalizeSnakeCase(PokemonMoveMethodById[pokemonMove.pokemon_move_method_id].identifier)}</td>
                    <td>{MoveById[pokemonMove.move_id].power}</td>
                    <td>{MoveById[pokemonMove.move_id].accuracy}</td>
                    <td>{MoveById[pokemonMove.move_id].pp}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </details>
        ))
    }
  </div>
</StarlightPage>
