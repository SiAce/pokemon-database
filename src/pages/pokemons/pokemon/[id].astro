---
import { Card } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import statColorJson from "../../../utils/stat-color.json";
import { capitalizeFirstLetter, capitalizeSnakeCase } from "../../../utils/string";
import typeColorJson from "../../../utils/type-color.json";

import { db } from "src/db/db-client";
import { eq } from "drizzle-orm";
import { Pokemon } from "db/schema";

export async function getStaticPaths() {
  const pokemons = await db.query.Pokemon.findMany({
    columns: {
      id: true,
    },
  });
  return pokemons.map((pokemon) => ({
    params: { id: pokemon.id },
  }));
}

const { id: stringId } = Astro.params;
const id = Number(stringId);

const pokemon = (await db.query.Pokemon.findFirst({
  columns: {
    identifier: true,
    height: true,
    weight: true,
    base_experience: true,
    is_default: true,
  },
  where: eq(Pokemon.id, id),
  with: {
    species: {
      columns: {
        identifier: true,
      },
    },
    types: {
      columns: {},
      with: {
        type: {
          columns: {
            identifier: true,
          },
        },
      },
    },
    abilities: {
      columns: {
        is_hidden: true,
      },
      with: {
        ability: {
          columns: {
            identifier: true,
          },
        },
      },
    },
    stats: {
      columns: {
        base_stat: true,
        effort: true,
      },
      with: {
        stat: {
          columns: {
            identifier: true,
          },
        },
      },
    },
    forms: {
      columns: {
        identifier: true,
        is_default: true,
        is_battle_only: true,
        is_mega: true,
      },
    },
    game_indices: {
      columns: {
        game_index: true,
      },
      with: {
        version: {
          columns: {
            identifier: true,
          },
        },
      },
    },
    items: {
      columns: {
        rarity: true,
      },
      with: {
        version: {
          columns: {
            identifier: true,
          },
        },
        item: {
          columns: {
            identifier: true,
          },
        },
      },
    },
    moves: {
      columns: {},
      with: {
        move: {
          columns: {
            identifier: true,
          },
        },
      },
    },
  },
}))!;

const { height, weight, base_experience, species, types, abilities, stats, forms, game_indices, items, moves } =
  pokemon;
const [name] = [pokemon.identifier].map(capitalizeSnakeCase);

const headings = [
  { depth: 2, slug: "basic-info", text: "Basic Info" },
  { depth: 2, slug: "sprites", text: "Sprites" },
  { depth: 2, slug: "moves", text: "Moves" },
];

const uniqueMoveNames = [...new Set(moves.map((move) => move.move?.identifier))];
---

<StarlightPage frontmatter={{ title: name }} headings={headings}>
  <h2 id={headings[0].slug}>{headings[0].text}</h2>
  <Card title={name}>
    <div class="flex flex-col divide-y-2 gap-4">
      <img
        class="mx-auto"
        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
        width={300}
        height={300}
        alt={name}
      />
      <div>
        <h4 class="my-2">Type</h4>
        <div>
          {
            types.map((type) => (
              <a class="no-underline" href="#">
                <span
                  class={`px-4 py-2 mr-4 text-gray-50`}
                  style={{
                    backgroundColor: (typeColorJson as any)[type.type?.identifier!],
                  }}
                >
                  {capitalizeFirstLetter(type.type?.identifier!)}
                </span>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Abilities</h4>
        <div>
          {
            abilities.map((ability) => (
              <a class="no-underline" href="#">
                <span class="rounded-md bg-gray-400 px-4 py-2 mr-4 font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10">
                  {capitalizeFirstLetter(ability.ability?.identifier)}
                </span>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Base Stats</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            stats.map((stat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: (statColorJson as any)[stat.stat?.identifier!],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 py-2 text-sm">
                  <div>{capitalizeSnakeCase(stat.stat?.identifier)}</div>
                  <div>{stat.base_stat}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div>
        <h4 class="my-2">Effort Value Yield</h4>
        <div class="flex justify-between flex-wrap gap-1">
          {
            stats.map((stat) => (
              <a
                class="no-underline flex-1 rounded-md text-center font-semibold text-gray-50 ring-1 ring-inset ring-gray-500/10 flex justify-center"
                style={{
                  backgroundColor: (statColorJson as any)[stat.stat?.identifier!],
                }}
                href="#"
              >
                <div class="flex flex-col justify-between text-gray-700 py-2 text-sm">
                  <div>{capitalizeSnakeCase(stat.stat?.identifier)}</div>
                  <div>{stat.effort}</div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
      <div class="py-2">
        <h4>Base Experience</h4>
        <div class="pl-2">{base_experience}</div>
      </div>
      <div class="flex justify-stretch divide-x-2">
        <div class="flex-auto mt-4 pl-2">
          <h4>Height</h4>
          <p>{height! / 10} m</p>
        </div>
        <div class="flex-auto !mt-4 pl-2">
          <h4>Weight</h4>
          <p>{weight! / 10} kg</p>
        </div>
      </div>
    </div>
  </Card>
  <hr class="!my-4 border-gray-800" />
  <h2 class="!my-4" id={headings[2].slug}>{headings[2].text}</h2>
  <div class="flex flex-col gap-2">
    {
      uniqueMoveNames.map((moveName) => (
        <Card title={capitalizeSnakeCase(moveName)}>
          <hr class="!my-2" />
          <div class="flex flex-col divide-y-2" />
        </Card>
      ))
    }
  </div>
</StarlightPage>
---
